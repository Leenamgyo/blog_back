<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-21T14:02:12+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Programming, Coffee, etc.</title><entry><title type="html">[DesignPattern] Factory Pattern</title><link href="http://localhost:4000/designpattern/2022/10/21/factory-pattern.html" rel="alternate" type="text/html" title="[DesignPattern] Factory Pattern" /><published>2022-10-21T13:00:00+09:00</published><updated>2022-10-21T13:00:00+09:00</updated><id>http://localhost:4000/designpattern/2022/10/21/factory-pattern</id><content type="html" xml:base="http://localhost:4000/designpattern/2022/10/21/factory-pattern.html"><![CDATA[<h2 id="what-is-factory-pattern">What is Factory Pattern</h2>
<p>팩토리 패턴(factory Pattern)은 자주 쓰이는 패턴을 엮어서 집필한 GoF의 ‘생성 패턴’ 중 하나입니다. 이 패턴은 객체를 생성하는 로직을 서브 클래스에 맡기면서 클래스 생성을 추상화시키고 프로그램 실행 중 다양한 클래스를 생성시킬 수 있습니다. 즉, 팩토리 패턴을 사용한다면 유사한 속성을 가진 다양한 객체의 생성을 컨트롤 할 수 있게 되면서 특정한 클래스와 직접적으로 결합하지 않으면서 느슨한 결합(loosed Coupling)을 만들 수 있습니다. 팩토리 패턴은 잘 알려진 2가지의 방법이 있는데 이는 메소드를 이용한 ‘팩토리 메소드 패턴’과 추상 클래스를 이용한 ‘추상 팩토리 패턴’입니다.</p>

<h1 id="example-1-lets-make-the-factory-pattern-simply">Example 1: let’s make the Factory Pattern simply</h1>

<h1 id="진짜-팩토리를-만들어보자">진짜 팩토리를 만들어보자</h1>

<h1 id="의존성dependency-inversion-principle-역전-원칙">의존성(Dependency Inversion Principle) 역전 원칙</h1>
<p>“구현보다는 인터페이스에 맞춰서 프로그래밍 한다.”</p>

<h1 id="변경에-열려있는-코드를-바꿀-수-있는-팩토리-패턴">변경에 열려있는 코드를 바꿀 수 있는 팩토리 패턴</h1>
<p>잘 알려진 팩토리 패턴은 메소드를 이용한 ‘팩토리 메소드 패턴’ 그리고 추상화(abstract)를 이용한 ‘추상 팩토리 패턴’이 있다.</p>

<h2 id="subclass-vs-decorator-pattern">SubClass vs Decorator pattern</h2>
<p>innos blog를 인용한다면 현재 만들어진 클래스를 이용해서 기능을 확장하는 방법은 ‘서브클래스’를 만들거나 ‘데코레이터 패턴’을 두 가지의 선택지가 있다고 한다. 두 가지 중 먼저, 서브클래스는 우리가 사용하는 상속에 대한 이야기이다. 이 블로그에서 확장 시, 서브클래스는 약간의 혼란을 준다고 한다. 위 블로그에서 혼란에 대한 이유를 명확하게 설명하지 않았는데, 내 생각에는 상위클래스의 종속성을 따라야하는 것 때문에 단순한 확장보다는 종속성을 고려한 설계를 고려해야 되기 때문이 아닐까 싶다. 하지만, 데코레이터는 상위 클래스의 종속성을 따르지 않아도 되며 확장 시, 소스의 변경을 요구하지 않기 때문에 서브클래스보다 자유로운 확장이 가능하다.</p>

<h3 id="example-subclass">Example: SubClass</h3>
<p>HeadFirstDesignPattern의 나온 예제를 한번 보자. 카페의 주문 시스템을 만들고 있다. 여기서는 서브클래스를 두 가지로 나누며, 한 가지의 경우는 각 재료마다 많은 클래스를 만드는 방식, 다른 한 가지의 경우는 모든 특성을 포함하는 하나의 클래스르 만들고 수퍼클래스에 대한 몇 가지의 서브클래스를 만들어 사용한다.</p>

<p><strong>첫 번째 예제를 한번 확인해보자</strong>
<img src="/assets/img/design-pattern/decorator_subclass.png" alt="subclass_1" /></p>

<p>음료에 대해 가격을 오바라이드하여 클래스를 설계하는 형태다. 이러한 형태는 단순히 슈퍼클래스가 형태만 상속할 뿐 내부 로직의 대부분을 서브클래스가 맡는다. 이러한 경우는 새로운 메뉴 확장은 쉬우나 관리할 클래스가 많고 레시피를 코드화 시키지 않은 형태이기 때문에 변화에 대응하기 어렵다. 예를 들어, 우유가격 등 재료 가격이 바뀔 경우 각 서브 클래스를 접근해 가격을 일일이 바꾸어야 한다. 또한, 변경시 해당 클래스에 접근하여 일일이 레시피를 확인하여 대응해야 하는 등 관리에 대한 피로감이 늘어난다. 또한, cost()만으로 이루어진 코드는 레시피를 코드화 시키지 않아 따로 레시피를 문서화하여 명시적으로 관리해주어야 하는 문제가 있습니다.</p>

<p><strong>두 번째 예제를 한번 확인해보자</strong>
<img src="/assets/img/design-pattern/decorator_subclass_2.png" alt="subclass_2" /></p>

<p>첫 번째 예제보다는 클래스의 개수가 적어지고 재료 가격을 미리 정해놓아 코드로 가격을 표시할 수 있다. 또한 Beverage라는 슈퍼 클래스에서 원재자 가격을 정할 수 있으니 가격 변화에 대한 대응이 쉽다. 다만, 이러한 방식은 사용하지 않는 재료를 서브클래스에서 조작할 수 있는 점은 현실세계의 메뉴판을 완전히 표현할 수 없다. 예를 들어, 아메리카노를 주문하는데 setMilk, setMocha 등 아메리카노와 무관한 함수 및 메소드도 아메리카노에서 사용 가능하다.</p>

<h3 id="example-decorator">Example: Decorator</h3>

<p><img src="/assets/img/design-pattern/decorator_decorator.png" alt="decorator" />  <br />
이제는 데코레이턴 예제를 한번 보자. 데코레이터 패턴을 이용해 객체에 추가 요소를 동적으로 더할 수 있다. 재료가 추가/삭제가 되면 하나의 데코레이터를 덮거나 삭제를 하면되고 또한 다른 클래스에는 영향을 미치지 않는다. 그리고 각 원재료의 결합방식은 추가/삭제가 자유롭기 때문에 원재료의 관리가 자유롭다.</p>

<p><img src="/assets/img/design-pattern/decorator_decorator_2.png" alt="decorator_2" />  <br />
다음은 데코레이터에 대한 클래스 다이어 그램이다. 이 클래스 다이어그램을 보면 새로운 재료가 생성될 때마다 beverage 클래스가 composition하는 방식이다. 즉, 하나의 구현체는 각 클래스로 만들어진 재료를 입장할 때마다 가격과 description 멤버함수를 함쳐서 return 하게 된다.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">abstract</span> <span class="kd">class</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="nb">String</span> <span class="nx">description</span><span class="p">;</span> 

    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">description</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">abstract</span> <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">();</span> 
<span class="p">}</span>

<span class="nx">abstract</span> <span class="kd">class</span> <span class="nx">CondimentDecorator</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="kr">public</span> <span class="nx">abstract</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Espresso</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">Espresso</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">에스프레소</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mf">1.99</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">HouseBlend</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">HouseBlend</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">하우스 블렌드 커피</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="mi">89</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">DarkRoast</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">DarkRoast</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">하우스 블렌드 커피</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="mi">79</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">Mocha</span> <span class="kd">extends</span> <span class="nx">CondimentDecorator</span> <span class="p">{</span>
    
    <span class="kr">public</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">beverage</span> <span class="o">=</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, 모카</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">20</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Soy</span> <span class="kd">extends</span> <span class="nx">CondimentDecorator</span> <span class="p">{</span>
    
    <span class="kr">public</span> <span class="nx">Soy</span><span class="p">(</span><span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">beverage</span> <span class="o">=</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span><span class="o">+</span> <span class="dl">"</span><span class="s2">, 두유</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">31</span><span class="p">;</span>
    <span class="p">}</span> 

<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Whip</span> <span class="kd">extends</span> <span class="nx">CondimentDecorator</span> <span class="p">{</span> 
    <span class="kr">public</span> <span class="nx">Whip</span><span class="p">(</span><span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">beverage</span> <span class="o">=</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, 크림</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">30</span><span class="p">;</span>
    <span class="p">}</span>

    
<span class="p">}</span>

<span class="kr">public</span> <span class="kd">class</span> <span class="nx">StarbuzzCoffee</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="kd">static</span> <span class="k">void</span> <span class="nx">main</span><span class="p">(</span><span class="nb">String</span><span class="p">[]</span> <span class="nx">args</span><span class="p">)</span> <span class="nx">throws</span> <span class="nx">Exception</span> <span class="p">{</span>
        <span class="nx">Beverage</span> <span class="nx">beverage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Espresso</span><span class="p">();</span>
        <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> $</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">());</span>
    
        <span class="nx">Beverage</span> <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DarkRoast</span><span class="p">();</span>
        <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">beverage2</span><span class="p">);</span>
        <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">beverage2</span><span class="p">);</span>
        <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Whip</span><span class="p">(</span><span class="nx">beverage2</span><span class="p">);</span>
        <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span>
            <span class="nx">beverage2</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> $</span><span class="dl">"</span><span class="o">+</span> <span class="nx">beverage2</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span>
        <span class="p">);</span>

        <span class="nx">Beverage</span> <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HouseBlend</span><span class="p">();</span>
        <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Soy</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">);</span>
        <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">);</span>
        <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Whip</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">);</span>
        <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span>
            <span class="o">+</span> <span class="dl">"</span><span class="s2"> $</span><span class="dl">"</span><span class="o">+</span> <span class="nx">beverage3</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="the-relationship-between-the-decorator-pattern-and-ocpopen-closed-principle">The Relationship between the Decorator Pattern and OCP(Open Closed Principle)</h2>
<p>유지보수와 확장이 쉬운 소프트웨어를 개발하는데 도움이 되는 원칙인 ‘객체 지향의 5원칙’이 있다. 5개의 원칙 중 한가지인 OCP의 원칙은 “클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀있어야 한다는 것”이다. 이러한 데코레이터 패턴은 함수 확장시 내부 기능을 수정하지 않고 다른 기능을 접합하고 뗄 수 있는 특성은 확장에 열려있다는 것이며, 변경에 닫혀있다는 소리가 된다. 즉, 데코레이터 패턴은 OCP 원칙과 잘 부합하며 이는 유지보수 확장이 쉬운 소프트웨어를 개발하는데 장점이 될 수 있다.</p>

<h2 id="well-known-example-java-io-class">Well-known example: Java I/O class</h2>
<p><img src="/assets/img/design-pattern/decorator_java_io.png" alt="java_decorator" /></p>

<p>Java I/O 클래스는 Decorator class를 이용해 만들어진 대표적인 예제이다.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">BufferedInputStream</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">FileInputStream</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">FilterInputStream</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">IOException</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">InputStream</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">LowerCaseInputStream</span> <span class="kd">extends</span> <span class="nx">FilterInputStream</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">LowerCaseInputStream</span><span class="p">(</span><span class="nx">InputStream</span> <span class="k">in</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="k">in</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="kr">public</span> <span class="nx">int</span> <span class="nx">read</span><span class="p">()</span> <span class="nx">throws</span> <span class="nx">IOException</span> <span class="p">{</span> 
        <span class="nx">int</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">in</span><span class="p">.</span><span class="nx">read</span><span class="p">();</span>
        <span class="k">return</span> <span class="p">(</span><span class="nx">c</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">?</span> <span class="nx">c</span> <span class="p">:</span> <span class="nx">Character</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">((</span><span class="nx">char</span><span class="p">)</span><span class="nx">c</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">int</span> <span class="nx">read</span><span class="p">(</span><span class="nx">byte</span><span class="p">[]</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">int</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">int</span> <span class="nx">len</span><span class="p">)</span> <span class="nx">throws</span> <span class="nx">IOException</span> <span class="p">{</span>
        <span class="nx">int</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">in</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">len</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">offset</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">offset</span><span class="o">+</span><span class="nx">result</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">byte</span><span class="p">)</span><span class="nx">Character</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">((</span><span class="nx">char</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>


<span class="kr">public</span> <span class="kd">class</span> <span class="nx">JavaIOExample</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="kd">static</span> <span class="k">void</span> <span class="nx">main</span><span class="p">(</span><span class="nb">String</span><span class="p">[]</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">int</span> <span class="nx">c</span><span class="p">;</span>
        
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">InputStream</span> <span class="k">in</span> <span class="o">=</span> 
                <span class="k">new</span> <span class="nx">LowerCaseInputStream</span><span class="p">(</span>
                    <span class="k">new</span> <span class="nx">BufferedInputStream</span><span class="p">(</span>
                        <span class="k">new</span> <span class="nx">FileInputStream</span><span class="p">(</span><span class="dl">"</span><span class="s2">text.txt</span><span class="dl">"</span><span class="p">)));</span>

            <span class="k">while</span> <span class="p">((</span><span class="nx">c</span> <span class="o">=</span> <span class="k">in</span><span class="p">.</span><span class="nx">read</span><span class="p">())</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">((</span><span class="nx">char</span><span class="p">)</span><span class="nx">c</span><span class="p">);</span>
            <span class="p">}</span>
            
            <span class="k">in</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>

        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">IOException</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">printStackTrace</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="결론">결론</h2>
<p>기존의 소스를 변경하지 않고 얹히는 듯한 이 데코레이터 디자인 패턴을 이용한다면 객체 지향 5원칙 중 하나인 OCP에 충실한 유연한 디자인을 만들 수 있으나 자잘한 클래스가 많이 추가되어 소스 이해의 난이도가 증가할 수도 있다. 또한 특정 클라이언트에 의존해야하는 경우에도 데코레이터를 오용하는 경우는 피해야 한다. 또한 IONOS 블로그에 따르면 디버깅이 어려워진다는 단점이 있다.</p>

<h2 id="참조">참조</h2>
<ul>
  <li>https://www.ionos.com/digitalguide/websites/web-development/what-is-the-decorator-pattern</li>
  <li>Head First Design Pattern</li>
</ul>]]></content><author><name></name></author><category term="designPattern" /><summary type="html"><![CDATA[What is Factory Pattern 팩토리 패턴(factory Pattern)은 자주 쓰이는 패턴을 엮어서 집필한 GoF의 ‘생성 패턴’ 중 하나입니다. 이 패턴은 객체를 생성하는 로직을 서브 클래스에 맡기면서 클래스 생성을 추상화시키고 프로그램 실행 중 다양한 클래스를 생성시킬 수 있습니다. 즉, 팩토리 패턴을 사용한다면 유사한 속성을 가진 다양한 객체의 생성을 컨트롤 할 수 있게 되면서 특정한 클래스와 직접적으로 결합하지 않으면서 느슨한 결합(loosed Coupling)을 만들 수 있습니다. 팩토리 패턴은 잘 알려진 2가지의 방법이 있는데 이는 메소드를 이용한 ‘팩토리 메소드 패턴’과 추상 클래스를 이용한 ‘추상 팩토리 패턴’입니다.]]></summary></entry><entry><title type="html">[DesignPattern] Decorator Pattern</title><link href="http://localhost:4000/designpattern/2022/10/10/decorator-pattern.html" rel="alternate" type="text/html" title="[DesignPattern] Decorator Pattern" /><published>2022-10-10T13:00:00+09:00</published><updated>2022-10-10T13:00:00+09:00</updated><id>http://localhost:4000/designpattern/2022/10/10/decorator-pattern</id><content type="html" xml:base="http://localhost:4000/designpattern/2022/10/10/decorator-pattern.html"><![CDATA[<h2 id="what-is-decorator-pattern">What is Decorator Pattern</h2>
<p>GoF Design Pattern 중 ‘구조 패턴(클래스나 객체를 더하여 더 큰 구조를 만듦)’에 속하는 데코레이터 패턴은 상속(서브클래스)을 구현하지 않고 객체 작성이라는 형식으로 실행 중에 클래스를 꾸밀 수 있다. 데코레이터 패턴을 사용하면 기존 클래스 코드를 바꾸지 않고도 객체에 새로운 임무를 추가할 수 있습니다.</p>

<h2 id="subclass-vs-decorator-pattern">SubClass vs Decorator pattern</h2>
<p>innos blog를 인용한다면 현재 만들어진 클래스를 이용해서 기능을 확장하는 방법은 ‘서브클래스’를 만들거나 ‘데코레이터 패턴’을 두 가지의 선택지가 있다고 한다. 두 가지 중 먼저, 서브클래스는 우리가 사용하는 상속에 대한 이야기이다. 이 블로그에서 확장 시, 서브클래스는 약간의 혼란을 준다고 한다. 위 블로그에서 혼란에 대한 이유를 명확하게 설명하지 않았는데, 내 생각에는 상위클래스의 종속성을 따라야하는 것 때문에 단순한 확장보다는 종속성을 고려한 설계를 고려해야 되기 때문이 아닐까 싶다. 하지만, 데코레이터는 상위 클래스의 종속성을 따르지 않아도 되며 확장 시, 소스의 변경을 요구하지 않기 때문에 서브클래스보다 자유로운 확장이 가능하다.</p>

<h3 id="example-subclass">Example: SubClass</h3>
<p>HeadFirstDesignPattern의 나온 예제를 한번 보자. 카페의 주문 시스템을 만들고 있다. 여기서는 서브클래스를 두 가지로 나누며, 한 가지의 경우는 각 재료마다 많은 클래스를 만드는 방식, 다른 한 가지의 경우는 모든 특성을 포함하는 하나의 클래스르 만들고 수퍼클래스에 대한 몇 가지의 서브클래스를 만들어 사용한다.</p>

<p><strong>첫 번째 예제를 한번 확인해보자</strong>
<img src="/assets/img/design-pattern/decorator_subclass.png" alt="subclass_1" /></p>

<p>음료에 대해 가격을 오바라이드하여 클래스를 설계하는 형태다. 이러한 형태는 단순히 슈퍼클래스가 형태만 상속할 뿐 내부 로직의 대부분을 서브클래스가 맡는다. 이러한 경우는 새로운 메뉴 확장은 쉬우나 관리할 클래스가 많고 레시피를 코드화 시키지 않은 형태이기 때문에 변화에 대응하기 어렵다. 예를 들어, 우유가격 등 재료 가격이 바뀔 경우 각 서브 클래스를 접근해 가격을 일일이 바꾸어야 한다. 또한, 변경시 해당 클래스에 접근하여 일일이 레시피를 확인하여 대응해야 하는 등 관리에 대한 피로감이 늘어난다. 또한, cost()만으로 이루어진 코드는 레시피를 코드화 시키지 않아 따로 레시피를 문서화하여 명시적으로 관리해주어야 하는 문제가 있습니다.</p>

<p><strong>두 번째 예제를 한번 확인해보자</strong>
<img src="/assets/img/design-pattern/decorator_subclass_2.png" alt="subclass_2" /></p>

<p>첫 번째 예제보다는 클래스의 개수가 적어지고 재료 가격을 미리 정해놓아 코드로 가격을 표시할 수 있다. 또한 Beverage라는 슈퍼 클래스에서 원재자 가격을 정할 수 있으니 가격 변화에 대한 대응이 쉽다. 다만, 이러한 방식은 사용하지 않는 재료를 서브클래스에서 조작할 수 있는 점은 현실세계의 메뉴판을 완전히 표현할 수 없다. 예를 들어, 아메리카노를 주문하는데 setMilk, setMocha 등 아메리카노와 무관한 함수 및 메소드도 아메리카노에서 사용 가능하다.</p>

<h3 id="example-decorator">Example: Decorator</h3>

<p><img src="/assets/img/design-pattern/decorator_decorator.png" alt="decorator" />  <br />
이제는 데코레이턴 예제를 한번 보자. 데코레이터 패턴을 이용해 객체에 추가 요소를 동적으로 더할 수 있다. 재료가 추가/삭제가 되면 하나의 데코레이터를 덮거나 삭제를 하면되고 또한 다른 클래스에는 영향을 미치지 않는다. 그리고 각 원재료의 결합방식은 추가/삭제가 자유롭기 때문에 원재료의 관리가 자유롭다.</p>

<p><img src="/assets/img/design-pattern/decorator_decorator_2.png" alt="decorator_2" />  <br />
다음은 데코레이터에 대한 클래스 다이어 그램이다. 이 클래스 다이어그램을 보면 새로운 재료가 생성될 때마다 beverage 클래스가 composition하는 방식이다. 즉, 하나의 구현체는 각 클래스로 만들어진 재료를 입장할 때마다 가격과 description 멤버함수를 함쳐서 return 하게 된다.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">abstract</span> <span class="kd">class</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="nb">String</span> <span class="nx">description</span><span class="p">;</span> 

    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">description</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">abstract</span> <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">();</span> 
<span class="p">}</span>

<span class="nx">abstract</span> <span class="kd">class</span> <span class="nx">CondimentDecorator</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="kr">public</span> <span class="nx">abstract</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Espresso</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">Espresso</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">에스프레소</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mf">1.99</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">HouseBlend</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">HouseBlend</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">하우스 블렌드 커피</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="mi">89</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">DarkRoast</span> <span class="kd">extends</span> <span class="nx">Beverage</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="nx">DarkRoast</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">하우스 블렌드 커피</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">.</span><span class="mi">79</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">class</span> <span class="nx">Mocha</span> <span class="kd">extends</span> <span class="nx">CondimentDecorator</span> <span class="p">{</span>
    
    <span class="kr">public</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">beverage</span> <span class="o">=</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, 모카</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">20</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Soy</span> <span class="kd">extends</span> <span class="nx">CondimentDecorator</span> <span class="p">{</span>
    
    <span class="kr">public</span> <span class="nx">Soy</span><span class="p">(</span><span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">beverage</span> <span class="o">=</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span><span class="o">+</span> <span class="dl">"</span><span class="s2">, 두유</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">31</span><span class="p">;</span>
    <span class="p">}</span> 

<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Whip</span> <span class="kd">extends</span> <span class="nx">CondimentDecorator</span> <span class="p">{</span> 
    <span class="kr">public</span> <span class="nx">Whip</span><span class="p">(</span><span class="nx">Beverage</span> <span class="nx">beverage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">beverage</span> <span class="o">=</span> <span class="nx">beverage</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nb">String</span> <span class="nx">getDescription</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">, 크림</span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="nd">Override</span>
    <span class="kr">public</span> <span class="nx">double</span> <span class="nx">cost</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="k">return</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">30</span><span class="p">;</span>
    <span class="p">}</span>

    
<span class="p">}</span>

<span class="kr">public</span> <span class="kd">class</span> <span class="nx">StarbuzzCoffee</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="kd">static</span> <span class="k">void</span> <span class="nx">main</span><span class="p">(</span><span class="nb">String</span><span class="p">[]</span> <span class="nx">args</span><span class="p">)</span> <span class="nx">throws</span> <span class="nx">Exception</span> <span class="p">{</span>
        <span class="nx">Beverage</span> <span class="nx">beverage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Espresso</span><span class="p">();</span>
        <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="nx">beverage</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> $</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">beverage</span><span class="p">.</span><span class="nx">cost</span><span class="p">());</span>
    
        <span class="nx">Beverage</span> <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DarkRoast</span><span class="p">();</span>
        <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">beverage2</span><span class="p">);</span>
        <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">beverage2</span><span class="p">);</span>
        <span class="nx">beverage2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Whip</span><span class="p">(</span><span class="nx">beverage2</span><span class="p">);</span>
        <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span>
            <span class="nx">beverage2</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> $</span><span class="dl">"</span><span class="o">+</span> <span class="nx">beverage2</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span>
        <span class="p">);</span>

        <span class="nx">Beverage</span> <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HouseBlend</span><span class="p">();</span>
        <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Soy</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">);</span>
        <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mocha</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">);</span>
        <span class="nx">beverage3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Whip</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">);</span>
        <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="nx">beverage3</span><span class="p">.</span><span class="nx">getDescription</span><span class="p">()</span>
            <span class="o">+</span> <span class="dl">"</span><span class="s2"> $</span><span class="dl">"</span><span class="o">+</span> <span class="nx">beverage3</span><span class="p">.</span><span class="nx">cost</span><span class="p">()</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="the-relationship-between-the-decorator-pattern-and-ocpopen-closed-principle">The Relationship between the Decorator Pattern and OCP(Open Closed Principle)</h2>
<p>유지보수와 확장이 쉬운 소프트웨어를 개발하는데 도움이 되는 원칙인 ‘객체 지향의 5원칙’이 있다. 5개의 원칙 중 한가지인 OCP의 원칙은 “클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀있어야 한다는 것”이다. 이러한 데코레이터 패턴은 함수 확장시 내부 기능을 수정하지 않고 다른 기능을 접합하고 뗄 수 있는 특성은 확장에 열려있다는 것이며, 변경에 닫혀있다는 소리가 된다. 즉, 데코레이터 패턴은 OCP 원칙과 잘 부합하며 이는 유지보수 확장이 쉬운 소프트웨어를 개발하는데 장점이 될 수 있다.</p>

<h2 id="well-known-example-java-io-class">Well-known example: Java I/O class</h2>
<p><img src="/assets/img/design-pattern/decorator_java_io.png" alt="java_decorator" /></p>

<p>Java I/O 클래스는 Decorator class를 이용해 만들어진 대표적인 예제이다.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">BufferedInputStream</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">FileInputStream</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">FilterInputStream</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">IOException</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">InputStream</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">LowerCaseInputStream</span> <span class="kd">extends</span> <span class="nx">FilterInputStream</span> <span class="p">{</span>

    <span class="kr">public</span> <span class="nx">LowerCaseInputStream</span><span class="p">(</span><span class="nx">InputStream</span> <span class="k">in</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="k">in</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="kr">public</span> <span class="nx">int</span> <span class="nx">read</span><span class="p">()</span> <span class="nx">throws</span> <span class="nx">IOException</span> <span class="p">{</span> 
        <span class="nx">int</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">in</span><span class="p">.</span><span class="nx">read</span><span class="p">();</span>
        <span class="k">return</span> <span class="p">(</span><span class="nx">c</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">?</span> <span class="nx">c</span> <span class="p">:</span> <span class="nx">Character</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">((</span><span class="nx">char</span><span class="p">)</span><span class="nx">c</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="kr">public</span> <span class="nx">int</span> <span class="nx">read</span><span class="p">(</span><span class="nx">byte</span><span class="p">[]</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">int</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">int</span> <span class="nx">len</span><span class="p">)</span> <span class="nx">throws</span> <span class="nx">IOException</span> <span class="p">{</span>
        <span class="nx">int</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">in</span><span class="p">.</span><span class="nx">read</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">len</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="nx">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">offset</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">offset</span><span class="o">+</span><span class="nx">result</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">byte</span><span class="p">)</span><span class="nx">Character</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">((</span><span class="nx">char</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>


<span class="kr">public</span> <span class="kd">class</span> <span class="nx">JavaIOExample</span> <span class="p">{</span>
    <span class="kr">public</span> <span class="kd">static</span> <span class="k">void</span> <span class="nx">main</span><span class="p">(</span><span class="nb">String</span><span class="p">[]</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">int</span> <span class="nx">c</span><span class="p">;</span>
        
        <span class="k">try</span> <span class="p">{</span>
            <span class="nx">InputStream</span> <span class="k">in</span> <span class="o">=</span> 
                <span class="k">new</span> <span class="nx">LowerCaseInputStream</span><span class="p">(</span>
                    <span class="k">new</span> <span class="nx">BufferedInputStream</span><span class="p">(</span>
                        <span class="k">new</span> <span class="nx">FileInputStream</span><span class="p">(</span><span class="dl">"</span><span class="s2">text.txt</span><span class="dl">"</span><span class="p">)));</span>

            <span class="k">while</span> <span class="p">((</span><span class="nx">c</span> <span class="o">=</span> <span class="k">in</span><span class="p">.</span><span class="nx">read</span><span class="p">())</span> <span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">println</span><span class="p">((</span><span class="nx">char</span><span class="p">)</span><span class="nx">c</span><span class="p">);</span>
            <span class="p">}</span>
            
            <span class="k">in</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>

        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">IOException</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">e</span><span class="p">.</span><span class="nx">printStackTrace</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="결론">결론</h2>
<p>기존의 소스를 변경하지 않고 얹히는 듯한 이 데코레이터 디자인 패턴을 이용한다면 객체 지향 5원칙 중 하나인 OCP에 충실한 유연한 디자인을 만들 수 있으나 자잘한 클래스가 많이 추가되어 소스 이해의 난이도가 증가할 수도 있다. 또한 특정 클라이언트에 의존해야하는 경우에도 데코레이터를 오용하는 경우는 피해야 한다. 또한 IONOS 블로그에 따르면 디버깅이 어려워진다는 단점이 있다.</p>

<h2 id="참조">참조</h2>
<ul>
  <li>https://www.ionos.com/digitalguide/websites/web-development/what-is-the-decorator-pattern</li>
  <li>Head First Design Pattern</li>
</ul>]]></content><author><name></name></author><category term="designPattern" /><summary type="html"><![CDATA[What is Decorator Pattern GoF Design Pattern 중 ‘구조 패턴(클래스나 객체를 더하여 더 큰 구조를 만듦)’에 속하는 데코레이터 패턴은 상속(서브클래스)을 구현하지 않고 객체 작성이라는 형식으로 실행 중에 클래스를 꾸밀 수 있다. 데코레이터 패턴을 사용하면 기존 클래스 코드를 바꾸지 않고도 객체에 새로운 임무를 추가할 수 있습니다.]]></summary></entry><entry><title type="html">[DesignPattern] 디자인 패턴에 대한 생각정리</title><link href="http://localhost:4000/designpattern/2022/10/03/design-pattern.html" rel="alternate" type="text/html" title="[DesignPattern] 디자인 패턴에 대한 생각정리" /><published>2022-10-03T13:00:00+09:00</published><updated>2022-10-03T13:00:00+09:00</updated><id>http://localhost:4000/designpattern/2022/10/03/design-pattern</id><content type="html" xml:base="http://localhost:4000/designpattern/2022/10/03/design-pattern.html"><![CDATA[<h2 id="실생활에서의-패턴">실생활에서의 패턴</h2>
<p>회사에 신입이 들어와 팀에 배정을 받는다. 아마 팀의 상사는 신입에 대해서 아무것도 모를 것이고 어색할 것이다. 신입이 업무에 투입되고 시간이 지나 신입에 대해 많은 것을 알게된다. 성격, 특성, 루틴 등 일의 시너지를 만드는 방법 등 신입과 상호작용 하는 것에 대한 방법이 수립된다. 반면, 신입 또한 상사를 알게된다. 또한, 이제 신입은 회사 일에 적응하여 사원이 되어 상사가 요구하는 부분에 대해 상사가 많은 것을 설명해주지 않더라도 많은 것을 알 수 있다.</p>

<p>이처럼 상대방의 행동을 이해 한다면 상대방과 굳이 많은 의사소통을 하지않아도 상대방을 의중을 알아차릴 수 있으며 이해를 기초로 상대방에 대한 패턴을 정립한다면 더 많은 시너지를 낼 수 있을 것 같다.</p>

<p>다만, 이러한 패턴을 맹목적으로 믿으며 시간이 지나도 이 정립된 패턴만을 고집한다면 상사는 그 신입의 발전할 수 있는 개성을 온전히 살릴 수 없을 것이다.</p>

<h2 id="컴퓨터의-디자인-패턴">컴퓨터의 디자인 패턴</h2>
<p>컴퓨터 업무 또한 자주 사용하는 방식들 즉, 패턴을 찾고 그에 대한 일반적인 해결법을 만들어 사용하고 있다. 1995년에 집필된 디자인 패턴 베스트 셀러 서적인 <strong>GoF Desgin Pattern</strong>와 1996년 부터 시작해 2007년 집필을 마무리한 <strong>패턴 지향 아키텍처(POSA), Volume 1, 2 … 5</strong> 등 많은 서적들이 집필되고 패턴들이 정립화되어 현재도 자주 사용되고 있다.</p>

<p>디자인 패턴의 장점 구현 설계의 베스트 셀러인 <strong>Code Complete</strong>를 읽어보면 복잡성을 줄이고 일반적인 문제의 해결책을 제공하는 등 4가지의 장점을 나열하였고 발표한 <strong>GoF Design Pattern</strong> 에서는 재사용성, 유지관리, 분석, 의사소통에 따른 부분에 많은 이점이 있다고 한다.</p>

<h2 id="패턴을-나누는-3가지">패턴을 나누는 3가지</h2>
<p>GoF Design Pattern은 1995년 GoF(Gang of Four)라고 불리는 프로그래머계의 거장들인 Erich Gamma, Richard Helm, Ralph Johnson, John Vissides가 Object-Oriented-Programming을 토대로 패턴을 정립한 저서이다. 4명의 개발자는 ‘경험’이나 ‘내적인 축적’을 디자인 패턴이라는 형태로 정리하였다. GoF 4인방은 패턴을 나누기 전 3개의 구조(Structural Pattern), 행동(Behavior Pattern), 생성 (Creational Pattern) 3가지의 형식으로 분류하였다.</p>

<p>구조 패턴(Structural Pattern)은 클래스나 객체를 조합해 더 큰 <strong>구조를 만드는 패턴</strong>이다.예를 들어 서로 다른 인터페이스를 지닌 2개의 객체를 묶어 단일 인터페이스를 제공하거나 객체들을 서로 묶어 새로운 기능을 제공하는 패턴이다.</p>

<ul>
  <li>어답터 패턴 (Adapter Pattern)</li>
  <li>브릿지 패턴 (Bridge Pattern)</li>
  <li>합성 패턴 (Composition Pattern)</li>
  <li>데코레이터 패턴 (Decorator Pattern)</li>
  <li>퍼사드 패턴 (Facade Pattern)</li>
  <li>플라이웨이트 패턴 (Flyweight Patern)</li>
  <li>프록시 패턴(Proxy Pattern)</li>
</ul>

<p>행동 패턴 (Behavior Pattern)은 객체나 클래스 사이의 알고리즘이나 <strong>책임 분배</strong>에 관련된 패턴이다. 한 객체가 수행할 수 없는 작업을 여러 개의 객체로 어떻게 분배하며 객체 사이의 결합도 최소화에 중점을 둔다. 패턴을 주로 클래스에 적용하는지 아니면 객체에 적용하는지에 따라 구분되는 패턴이다.</p>

<ul>
  <li>책임연쇄 패턴(Chain of responsibility)</li>
  <li>커맨드 패턴(Command Pattern)</li>
  <li>인터프리터 패턴(Interpreter Pattern)</li>
  <li>이터레이터 패턴 (Iterator Pattern)</li>
  <li>옵저버 패턴(Observer Pattern)</li>
  <li>전략 패턴 (Strategy Pattern)</li>
  <li>템플릿 메서드 패턴 (Template method pattern)</li>
  <li>방문자 패턴 (visitor Pattern)</li>
  <li>중재자 패턴 (Mediator Pattern)</li>
  <li>상태 패턴 (State Pattern)</li>
  <li>기념품 패턴 (Memento Pattern)</li>
</ul>

<p>생성 패턴 (Creational Pattern)은 객체 생성에 관련된 패턴으로, 객체의 생성과 조합을 캡슐화해 특정 객체가 생성되거나 변경되어도 프로그램 구조에 영향을 크게 받지 않도록 유연성을 제공한다.</p>

<ul>
  <li>추상화 팩토리 패턴 (Abstract Factory Methods)</li>
  <li>빌더 패턴 (Builder Pattern)</li>
  <li>팩토리 패턴 (Factory Method Pattern)</li>
  <li>프로토타입 패턴 (Prototype Pattern)</li>
  <li>싱글톤 패턴 (Singleton Pattern)</li>
</ul>

<h2 id="한편으로는">한편으로는..</h2>
<p><strong>CodeComplete</strong>에 따르면 이러한 패턴이 우리 프로젝트에 많은 이점을 가져올 것이라고 하지만, 한편으로는 이러한 형식화된 패턴을 억지로 끼워 맞추는 것을 조심히라고 한다. 또한 <strong>IONOS blog</strong>에 따르면 디자인 패턴을 사용하는 것은 많은 지식을 요구하며, 기존의 만들어진 문제를 풀 수 있다는 명백한 믿음을 줌으로써 상대방의 창조성과 새로운 것을 만들고자 하는 것을 줄일 수 있다는 욕구를 줄인다는 것이다.</p>

<h2 id="참조">참조</h2>
<ul>
  <li>https://www.ionos.com/digitalguide/websites/web-development/what-are-design-patterns/</li>
  <li>https://www.gofpatterns.com/</li>
  <li>https://ko.wikipedia.org/wiki/디자인_패턴</li>
  <li>https://en.wikipedia.org/wiki/Design_Patterns</li>
</ul>]]></content><author><name></name></author><category term="designPattern" /><summary type="html"><![CDATA[실생활에서의 패턴 회사에 신입이 들어와 팀에 배정을 받는다. 아마 팀의 상사는 신입에 대해서 아무것도 모를 것이고 어색할 것이다. 신입이 업무에 투입되고 시간이 지나 신입에 대해 많은 것을 알게된다. 성격, 특성, 루틴 등 일의 시너지를 만드는 방법 등 신입과 상호작용 하는 것에 대한 방법이 수립된다. 반면, 신입 또한 상사를 알게된다. 또한, 이제 신입은 회사 일에 적응하여 사원이 되어 상사가 요구하는 부분에 대해 상사가 많은 것을 설명해주지 않더라도 많은 것을 알 수 있다. 이처럼 상대방의 행동을 이해 한다면 상대방과 굳이 많은 의사소통을 하지않아도 상대방을 의중을 알아차릴 수 있으며 이해를 기초로 상대방에 대한 패턴을 정립한다면 더 많은 시너지를 낼 수 있을 것 같다.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/update/2020/01/02/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-01-02T19:31:29+09:00</published><updated>2020-01-02T19:31:29+09:00</updated><id>http://localhost:4000/update/2020/01/02/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/update/2020/01/02/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">post-sample</title><link href="http://localhost:4000/sample/2020/01/02/post1.html" rel="alternate" type="text/html" title="post-sample" /><published>2020-01-02T19:20:23+09:00</published><updated>2020-01-02T19:20:23+09:00</updated><id>http://localhost:4000/sample/2020/01/02/post1</id><content type="html" xml:base="http://localhost:4000/sample/2020/01/02/post1.html"><![CDATA[<h1 id="post-sample">post-sample</h1>
<blockquote>
  <p>Hello!</p>
</blockquote>

<p>This is code</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">print</span> <span class="s1">'hello world'</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample" /><summary type="html"><![CDATA[post-sample Hello!]]></summary></entry></feed>